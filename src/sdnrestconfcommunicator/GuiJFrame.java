/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sdnrestconfcommunicator;

import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import static sdnrestconfcommunicator.PublicStatics.CONGESTION_THRESHOLD;
import static sdnrestconfcommunicator.PublicStatics.CONNECTION_REFRESH_TIME;
import static sdnrestconfcommunicator.PublicStatics.GRAPH_REFRESH_TIME;
import static sdnrestconfcommunicator.PublicStatics.priorityQueues;
import static sdnrestconfcommunicator.PublicStatics.queueMonitorTest;
import static sdnrestconfcommunicator.PublicStatics.queueMonitorTest2;

/**
 *
 * @author pas
 */

public class GuiJFrame extends javax.swing.JFrame 
{
    NetworkData mNet;
    String selectedNode = null,selectedNodeConnector;
    String[] nodes,flows,nodeConnectors;
    double bytesTrDifference,tmp;
    /**
     * Creates new form GuiJFrame
     */
    public GuiJFrame() {
        initComponents();
        tableLbl.setVisible(false);
        tableTxtFld.setVisible(false);
    }
    
    private void printToJList(String[] printArray,JList jList)
    {
        
        DefaultListModel listModel =  new DefaultListModel();
        listModel.removeAllElements();
        
        for (int i = 0; i < printArray.length; i++) 
        {
            //System.out.println(nodes[i]);
            String [] splitCommas = printArray[i].split(",");
            for (int j = 0; j < splitCommas.length; j++) 
                listModel.addElement(splitCommas[j]);
        }
        jList.setModel( listModel );
    }
    
    private boolean isItemSelected(String itemClicked,String[] values)
    {
        for (int i = 0; i < values.length; i++) 
        {
            //if node is selected enable get flow,install flow
            if(values[i].equals(itemClicked))
                return true;
        }
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controllerIpTxtFld = new javax.swing.JTextField();
        portTxtFld = new javax.swing.JTextField();
        usernameTxtFld = new javax.swing.JTextField();
        passwordFld = new javax.swing.JPasswordField();
        controllerIpLbl = new javax.swing.JLabel();
        portLbl = new javax.swing.JLabel();
        usernameLbl = new javax.swing.JLabel();
        passwordLbl = new javax.swing.JLabel();
        tableLbl = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        flowsList = new javax.swing.JList<>();
        tableTxtFld = new javax.swing.JTextField();
        connectionLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        nodesList = new javax.swing.JList<>();
        nodesLbl = new javax.swing.JLabel();
        nodeConnectorsLbl = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        nodeConnectorsList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        generalList = new javax.swing.JList<>();
        secLbl = new javax.swing.JLabel();
        appFlowLbl = new javax.swing.JLabel();
        monitorFlowsCmbx = new javax.swing.JComboBox<>();
        thresholdLbl = new javax.swing.JLabel();
        thresholdTextFld = new javax.swing.JTextField();
        kbpsLbl = new javax.swing.JLabel();
        forLbl = new javax.swing.JLabel();
        secondsTextFld = new javax.swing.JTextField();
        monitorChbx = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        topoMenu = new javax.swing.JMenu();
        connectionMenuItm = new javax.swing.JMenuItem();
        trafficMenu = new javax.swing.JMenu();
        getInterTrafficMenuItm = new javax.swing.JMenuItem();
        getUtilMenuItm = new javax.swing.JMenuItem();
        flowsMenu = new javax.swing.JMenu();
        dropFlowsMenuItm = new javax.swing.JMenuItem();
        setFlowsMenuItm = new javax.swing.JMenuItem();
        reportMenu = new javax.swing.JMenu();
        xlRepMenuItm = new javax.swing.JMenuItem();
        QosMenu = new javax.swing.JMenu();
        addToQueueMenuItm = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        controllerIpTxtFld.setText("127.0.0.1");

        portTxtFld.setText("8181");

        usernameTxtFld.setText("admin");

        passwordFld.setText("admin");

        controllerIpLbl.setText("Controller IP");

        portLbl.setText("Port");

        usernameLbl.setText("Username");

        passwordLbl.setText("Password");

        tableLbl.setText("Table:");
        tableLbl.setEnabled(false);

        flowsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        flowsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                flowsListMouseClicked(evt);
            }
        });
        flowsList.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                flowsListComponentHidden(evt);
            }
        });
        jScrollPane.setViewportView(flowsList);

        tableTxtFld.setText("0");
        tableTxtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableTxtFldActionPerformed(evt);
            }
        });

        connectionLabel.setText("No connection");

        nodesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        nodesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nodesListMouseClicked(evt);
            }
        });
        nodesList.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                nodesListComponentHidden(evt);
            }
        });
        jScrollPane1.setViewportView(nodesList);

        nodesLbl.setText("Nodes");

        nodeConnectorsLbl.setText("Interfaces");

        nodeConnectorsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        nodeConnectorsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nodeConnectorsListMouseClicked(evt);
            }
        });
        nodeConnectorsList.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                nodeConnectorsListComponentHidden(evt);
            }
        });
        jScrollPane2.setViewportView(nodeConnectorsList);

        jLabel1.setText("Flows");

        generalList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        generalList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                generalListMouseClicked(evt);
            }
        });
        generalList.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                generalListComponentHidden(evt);
            }
        });
        jScrollPane3.setViewportView(generalList);

        secLbl.setText("seconds");

        appFlowLbl.setText("Apply flow");

        monitorFlowsCmbx.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "q1", "q2", "q3" }));
        monitorFlowsCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monitorFlowsCmbxActionPerformed(evt);
            }
        });

        thresholdLbl.setText("Tr Exceeds");

        thresholdTextFld.setText("100000");

        kbpsLbl.setText("Kbps");

        forLbl.setText("For ");

        secondsTextFld.setText("10");

        monitorChbx.setText("Monitor Enable/Disable");
        monitorChbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monitorChbxActionPerformed(evt);
            }
        });

        topoMenu.setText("Topology");

        connectionMenuItm.setText("Connect");
        connectionMenuItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectionMenuItmActionPerformed(evt);
            }
        });
        topoMenu.add(connectionMenuItm);

        jMenuBar1.add(topoMenu);

        trafficMenu.setText("Traffic");

        getInterTrafficMenuItm.setText("Get Interface Traffic");
        getInterTrafficMenuItm.setEnabled(false);
        getInterTrafficMenuItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getInterTrafficMenuItmActionPerformed(evt);
            }
        });
        trafficMenu.add(getInterTrafficMenuItm);

        getUtilMenuItm.setText("Get Node Utilization");
        getUtilMenuItm.setEnabled(false);
        getUtilMenuItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getUtilMenuItmActionPerformed(evt);
            }
        });
        trafficMenu.add(getUtilMenuItm);

        jMenuBar1.add(trafficMenu);

        flowsMenu.setText("Flows");

        dropFlowsMenuItm.setText("Drop Flow");
        dropFlowsMenuItm.setEnabled(false);
        dropFlowsMenuItm.setRequestFocusEnabled(false);
        dropFlowsMenuItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropFlowsMenuItmActionPerformed(evt);
            }
        });
        flowsMenu.add(dropFlowsMenuItm);

        setFlowsMenuItm.setText("Set Flow");
        setFlowsMenuItm.setEnabled(false);
        setFlowsMenuItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setFlowsMenuItmActionPerformed(evt);
            }
        });
        flowsMenu.add(setFlowsMenuItm);

        jMenuBar1.add(flowsMenu);

        reportMenu.setText("Reports");

        xlRepMenuItm.setText("Excel Report");
        xlRepMenuItm.setEnabled(false);
        xlRepMenuItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xlRepMenuItmActionPerformed(evt);
            }
        });
        reportMenu.add(xlRepMenuItm);

        jMenuBar1.add(reportMenu);

        QosMenu.setText("Qos");

        addToQueueMenuItm.setText("Add to Queue");
        addToQueueMenuItm.setEnabled(false);
        addToQueueMenuItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToQueueMenuItmActionPerformed(evt);
            }
        });
        QosMenu.add(addToQueueMenuItm);

        jMenuBar1.add(QosMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(connectionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(344, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(controllerIpLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(portLbl)
                                        .addComponent(usernameLbl))
                                    .addGap(112, 112, 112)))
                            .addComponent(passwordLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tableLbl)
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nodesLbl)
                                    .addComponent(tableTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(passwordFld, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(usernameTxtFld, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(controllerIpTxtFld)
                            .addComponent(portTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nodeConnectorsLbl, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(forLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(thresholdLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(appFlowLbl, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(thresholdTextFld)
                                                    .addComponent(secondsTextFld, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(kbpsLbl)
                                                    .addComponent(secLbl)))
                                            .addComponent(monitorFlowsCmbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(20, 20, 20))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(monitorChbx, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(32, 32, 32))))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(connectionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(controllerIpLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(controllerIpTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(portTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(portLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(usernameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(usernameTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passwordFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(passwordLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tableTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tableLbl)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(thresholdLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(thresholdTextFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(kbpsLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(forLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(secondsTextFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(secLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(appFlowLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(monitorFlowsCmbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(monitorChbx)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nodesLbl)
                    .addComponent(nodeConnectorsLbl)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectionMenuItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectionMenuItmActionPerformed
        // TODO add your handling code here:
        //ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
            //Runnable updateRunnable = new Runnable() 
            {
                //public void run() 
                {
                    mNet = new NetworkData(usernameTxtFld.getText(),
                    new String(passwordFld.getPassword()),
                    controllerIpTxtFld.getText(),
                    portTxtFld.getText());            
        
                    if(mNet.isConnected)
                    {
                        //enables excel report button
                        xlRepMenuItm.setEnabled(true);
                        printToJList(mNet.getTopoNodes(),nodesList);

                        //changes connection label
                        connectionLabel.setText("Connection established");
                    }
                    else
                        connectionLabel.setText("<html><font color=\"red\">No Connection!</font></html>");
                }
            };            
            
            //executor.scheduleAtFixedRate(updateRunnable, 0,CONNECTION_REFRESH_TIME, TimeUnit.SECONDS);       
    }//GEN-LAST:event_connectionMenuItmActionPerformed

    private void flowsListComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_flowsListComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_flowsListComponentHidden

    private void flowsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_flowsListMouseClicked
        // TODO add your handling code here:       
        //is flow selected
        if(isItemSelected(flowsList.getSelectedValue(),flows) && isItemSelected(nodesList.getSelectedValue(),nodes))
        {
            setFlowsMenuItm.setEnabled(true);
            dropFlowsMenuItm.setEnabled(true);
            tableLbl.setVisible(true);
            tableTxtFld.setVisible(true);
                
            String [] flowValues = mNet.getFlowsValues(flowsList.getSelectedValue());
            //removes []{} symbols
            //prints flow attributes
            for (int i=0; i<flowValues.length; i++)
               flowValues[i] = flowValues[i].replaceAll("[\\{\\]\\[\"\\}]", "");      
            printToJList((flowValues),generalList);              
        }
        else
            JOptionPane.showMessageDialog(null, "Select a node and a flow!!");
    }//GEN-LAST:event_flowsListMouseClicked

    private void tableTxtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableTxtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tableTxtFldActionPerformed

    private void dropFlowsMenuItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropFlowsMenuItmActionPerformed
        // TODO add your handling code here:
        if (isItemSelected(flowsList.getSelectedValue(),flows))
        {
            if(mNet.dropFlows(mNet.elemUsedForFlows, tableTxtFld.getText(), flowsList.getSelectedValue()))
                JOptionPane.showMessageDialog(null, "Flow successfully droped");
            else
                JOptionPane.showMessageDialog(null, "Error received, flow not droped");
        }
        else
            JOptionPane.showMessageDialog(null, "Select a flow!!");      
    }//GEN-LAST:event_dropFlowsMenuItmActionPerformed

    private void setFlowsMenuItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setFlowsMenuItmActionPerformed
        // TODO add your handling code here:    
        if (isItemSelected(nodesList.getSelectedValue(),nodes))
            new SetFlowJFrame(flowsList.getSelectedValue(), mNet.username, mNet.password, mNet.controllerIp).setVisible(true);
        else
            JOptionPane.showMessageDialog(null, "Select a node!!");
        
    }//GEN-LAST:event_setFlowsMenuItmActionPerformed

    private void getInterTrafficMenuItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getInterTrafficMenuItmActionPerformed
        // TODO add your handling code here:
        
        
        if(isItemSelected(nodeConnectorsList.getSelectedValue(),nodeConnectors))
        {
            
            if (isItemSelected(nodesList.getSelectedValue(),nodes))
                selectedNode = nodesList.getSelectedValue();
            else
                JOptionPane.showMessageDialog(null, "Select a node!!");
            
            selectedNodeConnector = nodeConnectorsList.getSelectedValue();
            String[] traRecBytesArray = mNet.getNodeConBytes(selectedNodeConnector,selectedNode);
            int interfaceSpeed = mNet.getNodeConInterSpeed(selectedNodeConnector,selectedNode);//kbps
            
            TrafficChart  mChart = new TrafficChart(Double.parseDouble(traRecBytesArray[0]),
                    Double.parseDouble(traRecBytesArray[1]), interfaceSpeed);
            mChart.setVisible(true);

            ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
            Runnable updateRunnable = new Runnable() {
                public void run() 
                {
                    String[] tmp = mNet.getNodeConBytes(selectedNodeConnector,selectedNode);
//                    System.out.println(tmp[0]);
//                    System.out.println(tmp[1]);
                    mChart.updateGraph(Double.parseDouble(tmp[0]),Double.parseDouble(tmp[1]),interfaceSpeed);
                    if(!mChart.isVisible()){
                        executor.shutdown();
                    }
                }
            };            
            
            executor.scheduleAtFixedRate(updateRunnable, 0, GRAPH_REFRESH_TIME, TimeUnit.SECONDS);            
        }
        else
            JOptionPane.showMessageDialog(null, "Select an interface/node-connector!!");
    }//GEN-LAST:event_getInterTrafficMenuItmActionPerformed

    private void getUtilMenuItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getUtilMenuItmActionPerformed
        // TODO add your handling code here:
        if (isItemSelected(nodesList.getSelectedValue(),mNet.getNodesNoHosts()))
                printToJList(mNet.getNodeUtil(nodesList.getSelectedValue()),generalList);
        else
            JOptionPane.showMessageDialog(null, "Select a node(no host)!!");
    }//GEN-LAST:event_getUtilMenuItmActionPerformed

    private void xlRepMenuItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xlRepMenuItmActionPerformed
        // TODO add your handling code here:
        //mNet has the network data for the excel, passed through static var
        FileChooser.net = mNet;
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                //Turn off metal's use of bold fonts
                UIManager.put("swing.boldMetal", Boolean.FALSE); 
                FileChooser.createAndShowGUI();
            }
        });
    }//GEN-LAST:event_xlRepMenuItmActionPerformed

    
    private void nodesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nodesListMouseClicked
        // TODO add your handling code here:
        nodes = mNet.getTopoNodes();
        
        //if node clicked show interfaces, flows
        if(isItemSelected(nodesList.getSelectedValue(),mNet.getNodesNoHosts()))
        {
            //enables get average traffic menu item
            getUtilMenuItm.setEnabled(true);
            
            //enables get add to queue menu item
            addToQueueMenuItm.setEnabled(true);
            
            //shows node connectors/interfaces of node clicked
            nodeConnectors = mNet.getNodeConIDs(nodesList.getSelectedValue());
            printToJList(nodeConnectors,nodeConnectorsList);
            
            //show flows of node clicked
            flows = mNet.getFlowIDs(nodesList.getSelectedValue(),tableTxtFld.getText());
            printToJList(flows,flowsList);
        }
        //if host clicked,show mac,ip
        else
            printToJList(mNet.getHostValues(nodesList.getSelectedValue()),generalList);
    }//GEN-LAST:event_nodesListMouseClicked

    private void nodesListComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_nodesListComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_nodesListComponentHidden

    private void nodeConnectorsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nodeConnectorsListMouseClicked
        // TODO add your handling code here:
        getInterTrafficMenuItm.setEnabled(true);
    }//GEN-LAST:event_nodeConnectorsListMouseClicked

    private void nodeConnectorsListComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_nodeConnectorsListComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_nodeConnectorsListComponentHidden

    private void generalListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_generalListMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_generalListMouseClicked

    private void generalListComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_generalListComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_generalListComponentHidden

    private void addToQueueMenuItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToQueueMenuItmActionPerformed
        // TODO add your handling code here:
        if (isItemSelected(nodesList.getSelectedValue(),nodes))
            new SetQueueFlowJFrame(nodesList.getSelectedValue(), mNet.username, mNet.password, mNet.controllerIp).setVisible(true);
        else
            JOptionPane.showMessageDialog(null, "Select a node!!");
    }//GEN-LAST:event_addToQueueMenuItmActionPerformed

    private void monitorChbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monitorChbxActionPerformed
        // TODO add your handling code here:
        ScheduledExecutorService monitorTrafficExecutor;
        monitorTrafficExecutor = Executors.newScheduledThreadPool(1);

        if(isItemSelected(nodeConnectorsList.getSelectedValue(),nodeConnectors) && isItemSelected(nodesList.getSelectedValue(),nodes))
        {      
            if(monitorChbx.isSelected())
            {
                int monitorTimer = Integer.parseInt(secondsTextFld.getText());
                int queueId = monitorFlowsCmbx.getSelectedIndex();
                double threshold = Double.parseDouble(thresholdTextFld.getText());
                String flowId = monitorFlowsCmbx.getSelectedItem().toString();
                
                startExecutor(monitorTrafficExecutor,monitorTimer, queueId,threshold ,
                        nodeConnectorsList.getSelectedValue(),nodesList.getSelectedValue(),
                        flowId);
            }
        }
        else if(monitorChbx.isSelected())
        {
            JOptionPane.showMessageDialog(null, "Select a node and an interface!!");
            monitorChbx.setSelected(false);
        }
        
    }//GEN-LAST:event_monitorChbxActionPerformed

    private void monitorFlowsCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monitorFlowsCmbxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_monitorFlowsCmbxActionPerformed

    public void startExecutor(ScheduledExecutorService mExec,int monitorTimer, int queueId,double thresholdByUser,
            String nodeConnector,String node,String flowId)
    {
        String[] traRecBytesArray = mNet.getNodeConBytes(nodeConnector,node);
        tmp = Double.parseDouble(traRecBytesArray[0]);
        
        double threshold = thresholdByUser * 125; // * 1000 /8
        System.out.println("Threshold: " + threshold);
        
        Runnable monitorRunnable = new Runnable() 
        {
            public void run() 
            {
                if(!monitorChbx.isSelected())
                    mExec.shutdown();
                
                String[] traRecBytesArray = mNet.getNodeConBytes(nodeConnector,node);
                System.out.println("Tr bytes: " + traRecBytesArray[0]);
                //System.out.println("Node Connector: " + nodeConnector);            

                bytesTrDifference = (Double.parseDouble(traRecBytesArray[0]) - tmp)/monitorTimer;
                tmp = Double.parseDouble(traRecBytesArray[0]);
                System.out.println(bytesTrDifference);
                if(bytesTrDifference > threshold)
                {  
                    JOptionPane.showMessageDialog(null, "Link Congestion!!");
                    String baseUrl = PublicStatics.CONFIG_NODE_CONNECTOR_URL + node +
                            "/table/0" +
                            //gets selected item name as flowId
                            "/flow/" + flowId;
                    HttpJsonRequest installMonitorFlowRequest = new HttpJsonRequest();
                    //after timeout flow is removed from switch but not from controller
                    //flow is first deleted and then installed
                    installMonitorFlowRequest.deleteRestconfInJson(mNet.username, mNet.password, 
                            mNet.controllerIp, baseUrl);
                    installMonitorFlowRequest.putRestconfInJson(mNet.username, mNet.password, 
                            mNet.controllerIp, baseUrl, 
                            //if the first item from combobox is selected, then it gets the first item from priorityQueues
                            priorityQueues.get(queueId));
                    //JOptionPane.showMessageDialog(null, installQueueFlowRequest.callStatus);
                }
            }
        };                            
        mExec.scheduleAtFixedRate(monitorRunnable, 0, monitorTimer, TimeUnit.SECONDS);                
    
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu QosMenu;
    private javax.swing.JMenuItem addToQueueMenuItm;
    private javax.swing.JLabel appFlowLbl;
    private javax.swing.JLabel connectionLabel;
    private javax.swing.JMenuItem connectionMenuItm;
    private javax.swing.JLabel controllerIpLbl;
    private javax.swing.JTextField controllerIpTxtFld;
    private javax.swing.JMenuItem dropFlowsMenuItm;
    private javax.swing.JList<String> flowsList;
    private javax.swing.JMenu flowsMenu;
    private javax.swing.JLabel forLbl;
    private javax.swing.JList<String> generalList;
    private javax.swing.JMenuItem getInterTrafficMenuItm;
    private javax.swing.JMenuItem getUtilMenuItm;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel kbpsLbl;
    private javax.swing.JCheckBox monitorChbx;
    private javax.swing.JComboBox<String> monitorFlowsCmbx;
    private javax.swing.JLabel nodeConnectorsLbl;
    private javax.swing.JList<String> nodeConnectorsList;
    private javax.swing.JLabel nodesLbl;
    private javax.swing.JList<String> nodesList;
    private javax.swing.JPasswordField passwordFld;
    private javax.swing.JLabel passwordLbl;
    private javax.swing.JLabel portLbl;
    private javax.swing.JTextField portTxtFld;
    private javax.swing.JMenu reportMenu;
    private javax.swing.JLabel secLbl;
    private javax.swing.JTextField secondsTextFld;
    private javax.swing.JMenuItem setFlowsMenuItm;
    private javax.swing.JLabel tableLbl;
    private javax.swing.JTextField tableTxtFld;
    private javax.swing.JLabel thresholdLbl;
    private javax.swing.JTextField thresholdTextFld;
    private javax.swing.JMenu topoMenu;
    private javax.swing.JMenu trafficMenu;
    private javax.swing.JLabel usernameLbl;
    private javax.swing.JTextField usernameTxtFld;
    private javax.swing.JMenuItem xlRepMenuItm;
    // End of variables declaration//GEN-END:variables
}
