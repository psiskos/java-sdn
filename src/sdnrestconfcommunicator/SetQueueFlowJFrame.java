/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sdnrestconfcommunicator;

import javax.swing.JOptionPane;
import org.codehaus.jettison.json.JSONObject;
import static sdnrestconfcommunicator.PublicStatics.queue;

/**
 *
 * @author pas
 */
public class SetQueueFlowJFrame extends javax.swing.JFrame {

    private String node,username,password,controllerIp;
    private HttpJsonRequest installQueueFlowRequest;
    /**
     * Creates new form SetQueueFlowJFrame
     */
    public SetQueueFlowJFrame(String node, String username, String password, String controllerIp) {
        initComponents();
        this.node = node;
        this.username = username;
        this.password = password;
        this.controllerIp = controllerIp;
        nodeLbl.setText("Node:  " + node);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nodeLbl = new javax.swing.JLabel();
        queueIdLbl = new javax.swing.JLabel();
        prioCmbx = new javax.swing.JComboBox<>();
        sourceIpLbl = new javax.swing.JLabel();
        destIpLbl = new javax.swing.JLabel();
        destIpTxtFld = new javax.swing.JTextField();
        sourceIpTxtFld = new javax.swing.JTextField();
        sourceSubnetCmbx = new javax.swing.JComboBox<>();
        destSubnetCmbx = new javax.swing.JComboBox<>();
        subnetLbl1 = new javax.swing.JLabel();
        subnetLbl2 = new javax.swing.JLabel();
        infoLbl = new javax.swing.JLabel();
        hardLbl = new javax.swing.JLabel();
        idleLbl = new javax.swing.JLabel();
        hardTxtFld = new javax.swing.JTextField();
        secondsLbl1 = new javax.swing.JLabel();
        idleTxtFld = new javax.swing.JTextField();
        secondsLbl2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        addToQueueBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        queueIdLbl.setText("Queue id: ");

        prioCmbx.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0 - No Priority", "1 - Medium Priority", "2 - High Priority" }));
        prioCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prioCmbxActionPerformed(evt);
            }
        });

        sourceIpLbl.setText("Source ip Network: ");

        destIpLbl.setText("Destination ip Network:");

        destIpTxtFld.setToolTipText("");
        destIpTxtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destIpTxtFldActionPerformed(evt);
            }
        });

        sourceIpTxtFld.setToolTipText("");
        sourceIpTxtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourceIpTxtFldActionPerformed(evt);
            }
        });

        sourceSubnetCmbx.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32" }));

        destSubnetCmbx.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32" }));
        destSubnetCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destSubnetCmbxActionPerformed(evt);
            }
        });

        subnetLbl1.setText("Subnet Mask:   /");

        subnetLbl2.setText("Subnet Mask:   /");

        infoLbl.setText("Use /32 subnet mask for single ip");

        hardLbl.setText("Hard Timeout :");

        idleLbl.setText("Idle Timeout :");

        hardTxtFld.setText("0");

        secondsLbl1.setText("seconds");

        idleTxtFld.setText("0");

        secondsLbl2.setText("seconds");

        jLabel1.setText("0 = No Timeout");

        addToQueueBtn.setText("Add to Queue");
        addToQueueBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToQueueBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sourceIpLbl)
                            .addComponent(queueIdLbl)
                            .addComponent(destIpLbl))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(prioCmbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(sourceIpTxtFld, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(destIpTxtFld, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(42, 42, 42)
                                        .addComponent(jLabel1)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(subnetLbl2)
                                    .addComponent(subnetLbl1))
                                .addGap(3, 3, 3)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sourceSubnetCmbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(destSubnetCmbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(67, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hardLbl)
                            .addComponent(idleLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(hardTxtFld, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                            .addComponent(idleTxtFld))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(secondsLbl1)
                            .addComponent(secondsLbl2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(163, 163, 163)
                                .addComponent(infoLbl))
                            .addComponent(nodeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(238, 238, 238)
                .addComponent(addToQueueBtn)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(nodeLbl)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(queueIdLbl)
                    .addComponent(prioCmbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addComponent(infoLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sourceIpLbl)
                    .addComponent(sourceIpTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sourceSubnetCmbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subnetLbl1))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(destIpLbl)
                    .addComponent(destIpTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(destSubnetCmbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subnetLbl2))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hardLbl)
                    .addComponent(hardTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(secondsLbl1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idleLbl)
                    .addComponent(idleTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(secondsLbl2))
                .addGap(18, 18, 18)
                .addComponent(addToQueueBtn)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void prioCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prioCmbxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_prioCmbxActionPerformed

    private void destIpTxtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destIpTxtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_destIpTxtFldActionPerformed

    private void sourceIpTxtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sourceIpTxtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sourceIpTxtFldActionPerformed

    private void destSubnetCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destSubnetCmbxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_destSubnetCmbxActionPerformed

    private void addToQueueBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToQueueBtnActionPerformed
        // TODO add your handling code here:
        if(sourceIpTxtFld.getText().equals("") && destIpTxtFld.getText().equals(""))
            JOptionPane.showMessageDialog(null, "Enter source or destination ip address ");
        else
        {
            String flowId = createFlowId(prioCmbx.getSelectedIndex(),
                sourceIpTxtFld.getText(),
                sourceSubnetCmbx.getSelectedItem().toString(),
                destIpTxtFld.getText(),
                destSubnetCmbx.getSelectedItem().toString());
            
            String queueData = createQueueString(prioCmbx.getSelectedIndex(),
                sourceIpTxtFld.getText(),
                sourceSubnetCmbx.getSelectedItem().toString(),
                destIpTxtFld.getText(),
                destSubnetCmbx.getSelectedItem().toString(),
                hardTxtFld.getText(),
                idleTxtFld.getText(),
                flowId
                );
        
            installQueueFlowRequest = new HttpJsonRequest();
            String baseUrl = PublicStatics.CONFIG_NODE_CONNECTOR_URL + node +
                    "/table/0" +
                    "/flow/" + flowId;
            if (installQueueFlowRequest.putRestconfInJson(username, password, controllerIp, baseUrl, queueData))
            {
                JOptionPane.showMessageDialog(null, "Flow Installed Successfully!!");
            }
            else
                JOptionPane.showMessageDialog(null, "Error... Code " + installQueueFlowRequest.callStatus);

                this.dispose();
        }
    }//GEN-LAST:event_addToQueueBtnActionPerformed

    private String createFlowId(Integer priority, String sourceIp, String sourceSubnet,
            String destIp, String destSubnet)
    {
        return "queue_" + priority.toString() 
                + "_" + sourceIp + "_" + sourceSubnet 
                + "_" + destIp + "_" + destSubnet;
    }
    
    private String createQueueString(Integer priority, String sourceIp, String sourceSubnet,
            String destIp, String destSubnet, String hardTimeout, String idleTimeout,String flowId)
    {
        JSONObject obj = null;
        try{
            obj = new JSONObject(queue);
            JSONObject childObj = obj.getJSONObject("flow");
            JSONObject queuObj = childObj.getJSONObject("instructions")
                    .getJSONObject("instruction")
                    .getJSONObject("apply-actions")
                    .getJSONArray("action")
                    .getJSONObject(1)
                    .getJSONObject("set-queue-action");                 
            
            queuObj.put("queue-id", priority.toString());
            
            JSONObject ipObj = childObj.getJSONObject("match");
            if(!sourceIpTxtFld.getText().equals(""))
                ipObj.put("ipv4-source", sourceIp + "/" + sourceSubnet);
            if(!destIpTxtFld.getText().equals(""))
                ipObj.put("ipv4-destination", destIp + "/" + destSubnet);
            childObj.put("hard-timeout", hardTimeout);
            childObj.put("idle-timeout", idleTimeout);
            childObj.put("id", flowId);
            
        }
        catch(Exception e){
            e.printStackTrace();
        }
        return obj.toString();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToQueueBtn;
    private javax.swing.JLabel destIpLbl;
    private javax.swing.JTextField destIpTxtFld;
    private javax.swing.JComboBox<String> destSubnetCmbx;
    private javax.swing.JLabel hardLbl;
    private javax.swing.JTextField hardTxtFld;
    private javax.swing.JLabel idleLbl;
    private javax.swing.JTextField idleTxtFld;
    private javax.swing.JLabel infoLbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel nodeLbl;
    private javax.swing.JComboBox<String> prioCmbx;
    private javax.swing.JLabel queueIdLbl;
    private javax.swing.JLabel secondsLbl1;
    private javax.swing.JLabel secondsLbl2;
    private javax.swing.JLabel sourceIpLbl;
    private javax.swing.JTextField sourceIpTxtFld;
    private javax.swing.JComboBox<String> sourceSubnetCmbx;
    private javax.swing.JLabel subnetLbl1;
    private javax.swing.JLabel subnetLbl2;
    // End of variables declaration//GEN-END:variables
}
